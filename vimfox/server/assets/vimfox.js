// Generated by CoffeeScript 1.6.3
/* vimfox.js ~ initiates websocket / reload script*/

var initSocketIO, injectJS;

window.onload = function() {
  var script, vimfoxHost, _i, _len, _ref;
  console.log("vimfox.js onload script initiating");
  _ref = document.getElementsByTagName('script');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    script = _ref[_i];
    if (script.src.match('vimfox.js')) {
      vimfoxHost = script.src.replace('/vimfox/vimfox.js', '');
      console.log("vimfox host  => " + vimfoxHost);
    }
  }
  if (typeof io === "undefined" || io === null) {
    console.log("injecting socket.io.min.js");
    return injectJS(vimfoxHost + "/vimfox/socket.io.min.js", function() {
      return initSocketIO(vimfoxHost);
    });
  }
};

initSocketIO = function(hostAddress) {
  var socket;
  socket = io.connect("" + hostAddress + "/ws");
  socket.emit('ready');
  socket.on('reload_file', function(data) {
    var fname;
    fname = data.fname;
    console.log("received reload_file event.");
    socket.emit('busy');
    console.log(data);
    return setTimeout((function() {
      var e, element, idx, src, tag, v, _i, _len, _ref, _results;
      if (fname.match(/\.css/)) {
        element = 'link';
        tag = 'href';
      } else {
        element = 'script';
        tag = 'src';
      }
      _ref = document.getElementsByTagName(element);
      _results = [];
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        e = _ref[idx];
        if (e[tag].match(fname)) {
          if (element === 'script') {
            src = e.src.replace(/\?[0-9]+$/, '') + ("?" + (+(new Date)));
            e.parentNode.removeChild(e);
            _results.push(injectJS(src, function() {
              return socket.emit('ready');
            }));
          } else {
            v = e[tag].replace(/\?[0-9]+$/, '') + ("?" + (+(new Date)));
            e[tag] = v;
            _results.push(socket.emit('ready'));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }), data.delay * 1000);
  });
  return socket.on('reload_page', function() {
    console.log("received reload page event");
    socket.emit('busy');
    return location.reload();
  });
};

injectJS = function(src, callback) {
  var s;
  if (callback == null) {
    callback = null;
  }
  s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.onload = function() {
    if (callback != null) {
      return callback();
    }
  };
  s.src = src;
  return document.body.appendChild(s);
};
